version: '3'

services:
  frontend:
    container_name: frontend
    image: ghcr.io/micaeladominguez/snippets-front:0.0.1
    environment:
      NEXT_PUBLIC_API_URL: https://snippetsps-dev.ddns.net
      AUTH0_SECRET: f9f87b9d308a5ce9c5956309b434da2c2dc25fa086e76cce8264ea478fa4fa4f
      AUTH0_BASE_URL: http://localhost:3000
      AUTH0_ISSUER_BASE_URL: https://dev-c4l43o2ndcdikqar.us.auth0.com
      AUTH0_CLIENT_ID: 1E4bHwGjDsGhgkLHcrlk0xemreuSXpnd
      AUTH0_CLIENT_SECRET: ZKsew2YqkwLT2MA9NpaFGQSHIMckYdhwCxl7HFkxt4aFjAizI1RTbR0gX0ooLf2j
    ports:
      - "3000:3000"

 # Testing scripts
  api-service:
    container_name: api-service
    image: ghcr.io/micaeladominguez/snippet-ui-managmet:0.0.1
    ports:
      - "8080:8080"

  # Testing scripts
  testing-scripts:
    container_name: testing-scripts
    image: ghcr.io/micaeladominguez/snippet-testing-scripts:0.0.1
    ports:
      - "8081:8080"
    environment:
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: testing_scripts_db
      DB_HOST: testing-db
      DB_PORT: 5432
      DATADOG_API_KEY: ${DD_API_KEY}
    depends_on:
      testing-db:
        condition: service_healthy

  testing-db:
    container_name: testing-db
    image: postgres:12
    ports:
      - "5432:5432"
    volumes:
      - ./testing-db-logs:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: testing_scripts_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "testing_scripts_db" ]
      interval: 30s
      timeout: 60s
      retries: 5

  # Manage repositories
  manage-repositories:
    container_name: manage-repositories
    image: ghcr.io/micaeladominguez/snippet-manage-repositories:0.0.1
    ports:
      - "8082:8080"
    environment:
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: manage_repositories_db
      DB_HOST: repos-db
      DB_PORT: 5432
      DATADOG_API_KEY: ${DD_API_KEY}
    depends_on:
      repos-db:
        condition: service_healthy

  repos-db:
    container_name: repos-db
    image: postgres:12
    ports:
      - "5433:5432"
    volumes:
      - ./repos-db-logs:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: manage_repositories_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "manage_repositories_db" ]
      interval: 30s
      timeout: 60s
      retries: 5

  # Snippet management service
  management-service:
    container_name: management-service
    image: ghcr.io/micaeladominguez/snippet-managment-service-snippet:0.0.1
    ports:
      - "8083:8080"
    environment:
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: snippet_db
      DB_HOST: management-db
      DB_PORT: 5432
      DATADOG_API_KEY: ${DD_API_KEY}
    depends_on:
      management-db:
        condition: service_healthy

  management-db:
    container_name: management-db
    image: postgres:12
    ports:
      - "5430:5432"
    volumes:
      - ./management-db-logs:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: snippet_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "snippet_db" ]
      interval: 30s
      timeout: 60s
      retries: 5

  # Datadog agent
  datadog-agent:
    image: datadog/agent:latest
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_LOGS_ENABLED=${DD_LOGS_ENABLED}
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=${DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL}
      - DD_CONTAINER_EXCLUDE_LOGS=${DD_CONTAINER_EXCLUDE_LOGS}
      - DD_SITE=${DD_SITE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - datadog-agent-run:/opt/datadog-agent/run:rw

volumes:
  datadog-agent-run:
  pgdata:

